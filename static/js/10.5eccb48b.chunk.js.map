{"version":3,"sources":["components/ImageCarousel.tsx","components/TechChips.tsx","components/ProjectCard.tsx","components/ProjectInformation.tsx","components/WorkInformation.tsx","components/Projects.tsx"],"names":["AutoPlaySwipeableViews","autoPlay","SwipeableViews","useStyles","makeStyles","theme","root","maxWidth","flexGrow","header","display","alignItems","height","paddingLeft","spacing","backgroundColor","img","maxHeight","overflow","width","ImageCarousel","prop","classes","useTheme","React","useState","activeStep","setActiveStep","maxSteps","images","length","className","Paper","square","elevation","Typography","label","axis","direction","index","onChangeIndex","step","enableMouseEvents","map","key","Math","abs","src","imgPath","alt","MobileStepper","style","background","steps","position","variant","nextButton","Button","size","onClick","prevActiveStep","disabled","backButton","TechChips","techChipsProp","console","log","data","d","icon","Chip","avatar","Avatar","component","target","clickable","margin","ProjectCard","props","expanded","setExpanded","Grid","item","id","Card","CardHeader","title","href","Link","subheader","date","paddingBottom","marginLeft","paddingTop","CardContent","body","Box","marginTop","techDetails","techIcons","Collapse","in","timeout","unmountOnExit","carouselImages","JavaOSS","ConverterWebsite","PersonalWebsite","Homesite","TIC","Projects","container","justify","textAlign","Divider"],"mappings":"wXAcMA,EAAyBC,mBAASC,KAWlCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,IACVC,SAAU,GAEZC,OAAQ,CACNC,QAAS,OACTC,WAAY,SACZC,OAAQ,GACRC,YAAaR,EAAMS,QAAQ,GAC3BC,gBAAiB,WAEnBC,IAAK,CACHC,UAAW,IACXP,QAAS,QACTH,SAAU,IACVW,SAAU,SACVC,MAAO,YAIJ,SAASC,EAAcC,GAC5B,IAAMC,EAAUnB,IACVE,EAAQkB,cAFgD,EAG1BC,IAAMC,SAAS,GAHW,mBAGvDC,EAHuD,KAG3CC,EAH2C,KAIxDC,EAAWP,EAAKQ,OAAOC,OAc7B,OAAoB,IAAbF,EACL,qCAEA,yBAAKG,UAAWT,EAAQhB,MACtB,kBAAC0B,EAAA,EAAD,CAAOC,QAAM,EAACC,UAAW,EAAGH,UAAWT,EAAQb,QAC7C,kBAAC0B,EAAA,EAAD,KAAad,EAAKQ,OAAOH,GAAYU,QAEvC,kBAACpC,EAAD,CACEqC,KAA0B,QAApBhC,EAAMiC,UAAsB,YAAc,IAChDC,MAAOb,EACPc,cAdmB,SAACC,GACxBd,EAAcc,IAcVC,mBAAiB,GAEhBrB,EAAKQ,OAAOc,KAAI,SAACF,EAAMF,GAAP,OACf,yBAAKK,IAAKH,EAAKL,OACZS,KAAKC,IAAIpB,EAAaa,IAAU,EAC/B,yBAAKR,UAAWT,EAAQN,IAAK+B,IAAKN,EAAKO,QAASC,IAAKR,EAAKL,QACxD,UAITR,EAAW,EACV,kBAACsB,EAAA,EAAD,CACEC,MAAO,CAAEC,WAAY,WACrBC,MAAOzB,EACP0B,SAAS,SACTC,QAAQ,OACR7B,WAAYA,EACZ8B,WACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,QAzCZ,WACjBhC,GAAc,SAACiC,GAAD,OAAoBA,EAAiB,MAwCDC,SAAUnC,IAAeE,EAAW,GAA9E,OAEuB,QAApBvB,EAAMiC,UAAsB,kBAAC,IAAD,MAAwB,kBAAC,IAAD,OAGzDwB,WACE,kBAACL,EAAA,EAAD,CAAQC,KAAK,QAAQC,QA3CZ,WACjBhC,GAAc,SAACiC,GAAD,OAAoBA,EAAiB,MA0CDC,SAAyB,IAAfnC,GAC7B,QAApBrB,EAAMiC,UAAsB,kBAAC,IAAD,MAAyB,kBAAC,IAAD,MADxD,UAOJ,sC,aC9FD,SAASyB,EAAUC,GAExB,OADAC,QAAQC,IAAIF,EAAcG,MAExB,oCACGH,EAAcG,KAAKxB,KAAI,SAACyB,GACvB,OAAiB,MAAVA,EAAEC,KACP,kBAACC,EAAA,EAAD,CACE1B,IAAKwB,EAAEhC,MACPmC,OAAQ,kBAACC,EAAA,EAAD,CAAQjB,QAAQ,SAASR,IAAKqB,EAAEC,OACxCI,UAAU,IACVC,OAAO,SACPtC,MAAOgC,EAAEhC,MACTuC,WAAS,EACTxB,MAAO,CAAEyB,OAAQ,SAGnB,kBAACN,EAAA,EAAD,CACE1B,IAAKwB,EAAEhC,MACPqC,UAAU,IAEVC,OAAO,SACPtC,MAAOgC,EAAEhC,MACTuC,WAAS,QCbN,SAASE,EAAYC,GAAuC,IAAD,EACxCtD,IAAMC,UAAS,GADyB,mBACjEsD,EADiE,KACvDC,EADuD,KAMxE,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAIL,EAAMK,IACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MACwB,KAAtBR,EAAMrE,OAAO8E,KACX,kBAACC,EAAA,EAAD,CAAMD,KAAMT,EAAMrE,OAAO8E,KAAMb,OAAO,SAASnB,QAAQ,MACpDuB,EAAMrE,OAAO6E,OAGhB,kBAACnD,EAAA,EAAD,CAAYoB,QAAQ,MAAMuB,EAAMrE,OAAO6E,OAG3CG,UAAWX,EAAMrE,OAAOiF,KACxBnB,OAAQ,kBAACC,EAAA,EAAD,CAAQjB,QAAQ,UAAUR,IAAK+B,EAAMrE,OAAO4D,OACpDlB,MAAO,CAAEwC,cAAe,SAE1B,yBAAKxC,MAAO,CAAEyC,WAAY,OAAQC,WAAY,QAC5C,kBAACC,EAAA,EAAD,KACGhB,EAAMiB,KACP,kBAACC,EAAA,EAAD,CAAKvB,UAAU,KAAKtB,MAAO,CAAEtC,YAAa,MAAOoF,UAAW,QACnC,OAAtBnB,EAAMoB,aACL,kBAAC/D,EAAA,EAAD,CAAYoB,QAAQ,MAClB,kBAACiC,EAAA,EAAD,CAAMf,UAAU,SAASlB,QAAQ,QAAQI,QA1B/B,WACxBqB,GAAaD,KA0BG,4BAAiB,IAAbA,EAAqB,OAAS,OAAlC,yBAIN,kBAAChB,EAAce,EAAMqB,YAEvB,kBAACC,EAAA,EAAD,CAAUC,GAAItB,EAAUuB,QAAQ,OAAOC,eAAa,GAClD,kBAACpE,EAAA,EAAD,CAAYoB,QAAQ,MAClB,qDAEDuB,EAAMoB,aAET,kBAAC9E,EAAkB0D,EAAM0B,oBC3D9B,SAASC,IACd,OACE,kBAAC5B,EACK,CACFM,GAAI,UACJ1E,OAAQ,CACN8E,KAAM,6DACND,MAAO,wCACPI,KAAM,sBACNrB,KAAM,cAER0B,KACE,kBAAC5D,EAAA,EAAD,+CAEE,kBAACqD,EAAA,EAAD,CACED,KAAK,qFACLb,OAAO,UAFT,eAFF,yKAYFyB,UAAW,CACThC,KAAM,CACJ,CACEE,KAAM,2BACNjC,MAAO,WAET,CACEiC,KAAM,wBACNjC,MAAO,QAET,CACEiC,KAAM,yBACNjC,MAAO,SAET,CACEiC,KAAM,yBACNjC,MAAO,uBAET,CACEiC,KAAM,yBACNjC,MAAO,SAET,CACEiC,KAAM,uBACNjC,MAAO,OAET,CACEiC,KAAM,+BACNjC,MAAO,gBAET,CACEiC,KAAM,0BACNjC,MAAO,UAET,CACEiC,KAAM,0BACNjC,MAAO,eAIb8D,YACE,oCACE,kBAAC/D,EAAA,EAAD,KACE,kDADF,6cAOA,0BAAMgB,MAAO,CAAEpC,gBAAiB,YAC7B,IADH,+dASA,kBAACoB,EAAA,EAAD,4KAIA,0BAAMgB,MAAO,CAAEpC,gBAAiB,YAC7B,IADH,0DAIA,6BACA,kBAACoB,EAAA,EAAD,KACE,wCADF,qpBASA,6BACA,kBAACA,EAAA,EAAD,KACE,2BACE,kBAACqD,EAAA,EAAD,CAAMD,KAAK,4BAA4Bb,OAAO,UAA9C,kBAGG,IALP,oSAQkF,KAElF,6BACA,kBAACvC,EAAA,EAAD,KACG,IACD,2BACE,kBAACqD,EAAA,EAAD,CAAMD,KAAK,8BAA8Bb,OAAO,UAAhD,qBAGG,IANP,4IAQuC,IACrC,kBAACc,EAAA,EAAD,CAAMD,KAAK,yDAAX,4BATF,oDAYA,6BACA,kBAACpD,EAAA,EAAD,KACE,0CACe,IACb,kBAACqD,EAAA,EAAD,CAAMD,KAAK,2BAA2Bb,OAAO,UAA7C,iBAGG,IANP,qKAUA,6BACA,kBAACvC,EAAA,EAAD,KACE,2BACE,kBAACqD,EAAA,EAAD,CAAMD,KAAK,4BAA4Bb,OAAO,UAA9C,iBAGG,IALP,0RAQgF,KAEhF,6BACA,kBAACvC,EAAA,EAAD,KACE,qDADF,mCACgE,IAC9D,kBAACqD,EAAA,EAAD,CAAMD,KAAK,yBAAyBb,OAAO,UAA3C,aAEQ,IAJV,6NAQE,8HAEF,8BAGJ8B,eAAgB,CACd3E,OAAQ,CACN,CACEO,MAAO,gBACPY,QAAS,uEAShB,SAAS0D,IACd,OACE,kBAAC7B,EACK,CACFM,GAAI,mBACJ1E,OAAQ,CACN8E,KAAM,6CACND,MAAO,0CACPI,KAAM,sBACNrB,KAAM,cAER0B,KACE,kBAAC5D,EAAA,EAAD,sJAKFgE,UAAW,CACThC,KAAM,CACJ,CACEE,KAAM,yBACNjC,MAAO,SAET,CACEiC,KAAM,8BACNjC,MAAO,cAET,CACEiC,KAAM,wBACNjC,MAAO,UAET,CACEiC,KAAM,uBACNjC,MAAO,SAET,CACEiC,KAAM,uBACNjC,MAAO,yBAET,CACEiC,KAAM,0BACNjC,MAAO,iBAET,CACEiC,KAAM,wBACNjC,MAAO,QAET,CACEiC,KAAM,yBACNjC,MAAO,SAET,CACEiC,KAAM,2BACNjC,MAAO,WAET,CACEiC,KAAM,yBACNjC,MAAO,uBAET,CACEiC,KAAM,yBACNjC,MAAO,SAET,CACEiC,KAAM,uBACNjC,MAAO,OAET,CACEiC,KAAM,+BACNjC,MAAO,gBAET,CACEiC,KAAM,0BACNjC,MAAO,UAET,CACEiC,KAAM,0BACNjC,MAAO,aAET,CACEiC,KAAM,0BACNjC,MAAO,gBAET,CACEiC,KAAM,6BACNjC,MAAO,sBAIb8D,YACE,oCACE,kBAAC/D,EAAA,EAAD,KACG,IACD,+CAFF,+PAImE,6BAJnE,IAI0E,6BAJ1E,2GAK2G,IACzG,sHANF,6rBAa6E,6BAC3E,6BAdF,yqBAsBE,kBAACqD,EAAA,EAAD,CACED,KAAK,kFACLb,OAAO,UAFT,gBAtBF,yNA+BE,6BACA,6BAhCF,qFAkCE,6BACA,6BAnCF,yDAsCA,0BAAMvB,MAAO,CAAEpC,gBAAiB,YAAhC,0CAC0C,uCAE1C,kBAACoB,EAAA,EAAD,sDACA,0BAAMgB,MAAO,CAAEpC,gBAAiB,YAAhC,YAGI,yUAGJ,6BACA,kBAACoB,EAAA,EAAD,KACE,2BACE,kBAACqD,EAAA,EAAD,CAAMD,KAAK,6BAA6Bb,OAAO,UAA/C,kBAGG,IALP,+GAQE,kBAACc,EAAA,EAAD,CAAMD,KAAK,4CAA4Cb,OAAO,UAC3D,IADH,OAEO,KACC,IAXV,oLAa6E,KAE7E,6BACA,kBAACvC,EAAA,EAAD,KACE,2BACE,kBAACqD,EAAA,EAAD,CAAMD,KAAK,6CAA6Cb,OAAO,UAA/D,mBAGG,IALP,SAMS,IACP,kBAACc,EAAA,EAAD,CAAMD,KAAK,mCAAmCb,OAAO,UAClD,IADH,sCAGQ,IAVV,8JAcA,6BACA,kBAACvC,EAAA,EAAD,KACE,2BACE,kBAACqD,EAAA,EAAD,CAAMD,KAAK,0BAA0Bb,OAAO,UAA5C,mBAGG,IALP,gHASA,6BACA,kBAACvC,EAAA,EAAD,KACE,2BACE,kBAACqD,EAAA,EAAD,CAAMD,KAAK,gCAAgCb,OAAO,UAAlD,qBAGG,IALP,+KAO2E,KAE3E,+BACE,+BACE,4BACE,qCACA,wCACA,qDACA,4CACA,0DAEF,4BACE,8CACA,kCACA,kCACA,mCACA,mCAEF,4BACE,4CACA,mCACA,kCACA,mCACA,mCAEF,4BACE,6CACA,mCACA,kCACA,mCACA,mCAEF,4BACE,6CACA,mCACA,kCACA,mCACA,mCAEF,4BACE,uCACA,mCACA,kCACA,mCACA,mCAEF,4BACE,uCACA,mCACA,kCACA,mCACA,mCAEF,4BACE,qCACA,mCACA,kCACA,mCACA,mCAEF,4BACE,qCACA,mCACA,kCACA,mCACA,mCAEF,4BACE,mCACA,mCACA,kCACA,mCACA,mCAEF,4BACE,oCACA,mCACA,kCACA,mCACA,mCAEF,4BACE,oCACA,mCACA,kCACA,mCACA,qCAIN,6BACA,kBAACvC,EAAA,EAAD,KACE,gFADF,oIAEwF,KAExF,8BAGJqE,eAAgB,CACd3E,OAAQ,CACN,CACEO,MAAO,UACPY,QAAS,sCAEX,CACEZ,MAAO,kCACPY,QAAS,kCAEX,CACEZ,MAAO,4BACPY,QAAS,wCAEX,CACEZ,MAAO,6BACPY,QAAS,sCAShB,SAAS2D,IACd,OACE,kBAAC9B,EACK,CACFM,GAAI,kBACJ1E,OAAQ,CACN8E,KAAM,GACND,MAAO,mBACPI,KAAM,sBACNrB,KAAM,cAER0B,KACE,kBAAC5D,EAAA,EAAD,+SAMFgE,UAAW,CACThC,KAAM,CACJ,CACEE,KAAM,yBACNjC,MAAO,SAET,CACEiC,KAAM,8BACNjC,MAAO,cAET,CACEiC,KAAM,wBACNjC,MAAO,UAET,CACEiC,KAAM,uBACNjC,MAAO,SAET,CACEiC,KAAM,4BACNjC,MAAO,eAET,CACEiC,KAAM,0BACNjC,MAAO,iBAET,CACEiC,KAAM,uBACNjC,MAAO,OAET,CACEiC,KAAM,+BACNjC,MAAO,gBAET,CACEiC,KAAM,0BACNjC,MAAO,YAIb8D,YACE,oCACE,kBAAC/D,EAAA,EAAD,KACE,kDADF,kFAGA,8BAGJqE,eAAgB,CACd3E,OAAQ,MCviBX,SAAS+E,IACd,OACE,kBAAC/B,EACK,CACFM,GAAI,WACJ1E,OAAQ,CACN8E,KAAM,2BACND,MAAO,sDACPI,KAAM,+BACNrB,KAAM,wCAER0B,KACE,oCACE,kBAAC5D,EAAA,EAAD,KACE,wCACY,IACd,kBAACA,EAAA,EAAD,kJAE+C,IAC7C,kBAACqD,EAAA,EAAD,CACED,KAAK,oPACLb,OAAO,UAEN,IAJH,YAHF,oSAYsF,IACpF,kBAACc,EAAA,EAAD,CAAMD,KAAK,sDAAsDb,OAAO,UAAxE,cAGA,kBAACc,EAAA,EAAD,CAAMD,KAAK,+BAA+Bb,OAAO,UAAjD,iBAhBF,wDAmBwD,KAExD,6BACA,kBAACvC,EAAA,EAAD,KACE,+CAEF,kBAACA,EAAA,EAAD,wqBASA,6BACA,kBAACA,EAAA,EAAD,4hBAQA,6BACA,kBAACA,EAAA,EAAD,oVAMA,6BACA,kBAACA,EAAA,EAAD,KACE,yDACY,IACd,kBAACA,EAAA,EAAD,oVAIoB,KAEpB,6BACA,kBAACA,EAAA,EAAD,KACE,6CAEF,kBAACA,EAAA,EAAD,sHAIA,wBAAIgB,MAAO,CAAE8C,UAAW,MAAOpF,YAAa,SAC1C,4GACA,kEACsC,IACpC,wBAAIsC,MAAO,CAAEtC,YAAa,SACxB,6HAGJ,wDAC4B,IAC1B,wBAAIsC,MAAO,CAAEtC,YAAa,SACxB,iFAGJ,gFACA,2GAEF,kBAACsB,EAAA,EAAD,2OAKA,6BACA,kBAACA,EAAA,EAAD,KACE,8CAEF,kBAACA,EAAA,EAAD,2CACA,wBAAIgB,MAAO,CAAEyB,OAAQ,MAAO/D,YAAa,SACvC,4BACE,gDADF,0BAGA,4BACE,gDADF,0CAGA,4BACE,iDADF,0BAGA,4BACE,mCADF,2BAGA,4BACE,8DADF,mBAGA,4BACE,yCADF,yDAGA,4BACE,8CADF,mCAGA,4BACE,sCADF,+BAC4C,sFAKlDsF,UAAW,CACThC,KAAM,CACJ,CACEE,KAAM,0BACNjC,MAAO,eAET,CACEiC,KAAM,4BACNjC,MAAO,YAET,CACEiC,KAAM,0BACNjC,MAAO,UAET,CACEiC,KAAM,uBACNjC,MAAO,OAET,CACEiC,KAAM,6BACNjC,MAAO,aAET,CACEiC,KAAM,8BACNjC,MAAO,cAET,CACEiC,KAAM,wBACNjC,MAAO,QAET,CACEiC,KAAM,0BACNjC,MAAO,iBAET,CACEiC,KAAM,wBACNjC,MAAO,QAET,CACEiC,KAAM,gCACNjC,MAAO,wBAET,CACEiC,KAAM,2BACNjC,MAAO,aAIb8D,YAAa,KACbM,eAAgB,CACd3E,OAAQ,CACN,CACEO,MAAO,aACPY,QAAS,yCAEX,CACEZ,MAAO,qBACPY,QAAS,wCAEX,CACEZ,MAAO,YACPY,QAAS,yCAEX,CACEZ,MAAO,kCACPY,QAAS,uCAShB,SAAS6D,IACd,OACE,kBAAChC,EACK,CACFM,GAAI,MACJ1E,OAAQ,CACN8E,KAAM,sBACND,MAAO,6BACPI,KAAM,sCACNrB,KAAM,8BAER0B,KACE,oCACE,kBAAC5D,EAAA,EAAD,uBACkB,IAChB,kBAACqD,EAAA,EAAD,CAAMD,KAAK,gCAAgCb,OAAO,UAAlD,iBAEQ,IAJV,4GAK4G,IAC1G,6BANF,IAMS,6BANT,oDAMiE,IAC/D,kBAACc,EAAA,EAAD,CAAMD,KAAK,0BAA0Bb,OAAO,UAA5C,cAPF,kUAcE,6BAdF,IAcS,6BAdT,mCAemC,IACjC,kBAACc,EAAA,EAAD,CAAMD,KAAK,iDAAiDb,OAAO,UAAnE,sBAhBF,0BAmB0B,IACxB,kBAACc,EAAA,EAAD,CAAMD,KAAK,gDAAgDb,OAAO,UAAlE,mBAEQ,IAtBV,2LA4BJyB,UAAW,CACThC,KAAM,CACJ,CACEE,KAAM,2BACNjC,MAAO,WAET,CACEiC,KAAM,wBACNjC,MAAO,QAET,CACEiC,KAAM,8BACNjC,MAAO,cAET,CACEiC,KAAM,+BACNjC,MAAO,eAET,CACEiC,KAAM,KACNjC,MAAO,mBAIb8D,YAAa,KACbM,eAAgB,CACd3E,OAAQ,CACN,CACEO,MAAO,cACPY,QAAS,oCAEX,CACEZ,MAAO,yBACPY,QAAS,0CAEX,CACEZ,MAAO,wBACPY,QAAS,uCAEX,CACEZ,MAAO,sBACPY,QAAS,4CAEX,CACEZ,MAAO,cACPY,QAAS,oCAEX,CACEZ,MAAO,qBACPY,QAAS,oCAEX,CACEZ,MAAO,qBACPY,QAAS,0CAEX,CACEZ,MAAO,mBACPY,QAAS,yCAEX,CACEZ,MAAO,gBACPY,QAAS,sCAEX,CACEZ,MAAO,kBACPY,QAAS,uCAEX,CACEZ,MAAO,iBACPY,QAAS,0CCjUR,SAAS8D,IACtB,OACE,kBAAC7B,EAAA,EAAD,CAAM8B,WAAS,EAACzE,UAAU,SAAS0E,QAAQ,SAASlG,QAAS,EAAGqC,MAAO,CAAE8D,UAAW,SAClF,kBAAChC,EAAA,EAAD,CAAMC,MAAI,GACR,kBAAC/C,EAAA,EAAD,CAAYsC,UAAU,KAAKlB,QAAQ,MAAnC,qBAGA,kBAAC2D,EAAA,EAAD,OAEF,kBAACT,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAAC1B,EAAA,EAAD,CAAMC,MAAI,IACV,kBAACD,EAAA,EAAD,CAAMC,MAAI,GACR,kBAAC/C,EAAA,EAAD,CAAYsC,UAAU,KAAKlB,QAAQ,MAAnC,mBAGA,kBAAC2D,EAAA,EAAD,OAEF,kBAACN,EAAD,MACA,kBAACC,EAAD,MACA,kBAAC5B,EAAA,EAAD,CAAMC,MAAI,IACV,kBAACD,EAAA,EAAD,CAAMC,MAAI,GACR,kBAAC/C,EAAA,EAAD,CAAYsC,UAAU,KAAKlB,QAAQ,MAAnC,kBAGA,kBAAC2D,EAAA,EAAD","file":"static/js/10.5eccb48b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { autoPlay } from 'react-swipeable-views-utils';\r\n\r\n//Text with Carousel effect, image carousel from Material ui sample code:\r\n//https://material-ui.com/components/steppers/#text-with-carousel-effect\r\n\r\nconst AutoPlaySwipeableViews = autoPlay(SwipeableViews);\r\n\r\nexport interface projectImage {\r\n  label: string;\r\n  imgPath: string;\r\n}\r\n\r\nexport interface carouselProps {\r\n  images: Array<projectImage>;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 400,\r\n    flexGrow: 1,\r\n  },\r\n  header: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    height: 50,\r\n    paddingLeft: theme.spacing(2),\r\n    backgroundColor: '#e0e0e0',\r\n  },\r\n  img: {\r\n    maxHeight: 255,\r\n    display: 'block',\r\n    maxWidth: 400,\r\n    overflow: 'hidden',\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nexport function ImageCarousel(prop: carouselProps): JSX.Element {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const maxSteps = prop.images.length;\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleStepChange = (step: number) => {\r\n    setActiveStep(step);\r\n  };\r\n\r\n  return maxSteps === 0 ? (\r\n    <></>\r\n  ) : (\r\n    <div className={classes.root}>\r\n      <Paper square elevation={0} className={classes.header}>\r\n        <Typography>{prop.images[activeStep].label}</Typography>\r\n      </Paper>\r\n      <AutoPlaySwipeableViews\r\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n        index={activeStep}\r\n        onChangeIndex={handleStepChange}\r\n        enableMouseEvents\r\n      >\r\n        {prop.images.map((step, index) => (\r\n          <div key={step.label}>\r\n            {Math.abs(activeStep - index) <= 2 ? (\r\n              <img className={classes.img} src={step.imgPath} alt={step.label} />\r\n            ) : null}\r\n          </div>\r\n        ))}\r\n      </AutoPlaySwipeableViews>\r\n      {maxSteps > 1 ? (\r\n        <MobileStepper\r\n          style={{ background: '#e0e0e0' }}\r\n          steps={maxSteps}\r\n          position=\"static\"\r\n          variant=\"text\"\r\n          activeStep={activeStep}\r\n          nextButton={\r\n            <Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps - 1}>\r\n              Next\r\n              {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n            </Button>\r\n          }\r\n          backButton={\r\n            <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n              {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n              Back\r\n            </Button>\r\n          }\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Chip, Avatar } from '@material-ui/core';\r\n\r\nexport interface techChip {\r\n  icon: string | null;\r\n  label: string;\r\n}\r\n\r\nexport interface techChipsProp {\r\n  data: Array<techChip>;\r\n}\r\n\r\nexport function TechChips(techChipsProp: techChipsProp): JSX.Element {\r\n  console.log(techChipsProp.data);\r\n  return (\r\n    <>\r\n      {techChipsProp.data.map((d: techChip) => {\r\n        return d.icon != null ? (\r\n          <Chip\r\n            key={d.label}\r\n            avatar={<Avatar variant=\"square\" src={d.icon}></Avatar>}\r\n            component=\"a\"\r\n            target=\"_blank\"\r\n            label={d.label}\r\n            clickable\r\n            style={{ margin: '2px' }}\r\n          />\r\n        ) : (\r\n          <Chip\r\n            key={d.label}\r\n            component=\"a\"\r\n            // href={d.href}\r\n            target=\"_blank\"\r\n            label={d.label}\r\n            clickable\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Card, CardHeader, Avatar, CardContent, Box, Link, Grid, Typography, Collapse } from '@material-ui/core';\r\nimport { ImageCarousel, carouselProps } from './ImageCarousel';\r\nimport { TechChips, techChipsProp } from './TechChips';\r\n\r\ninterface cardHeaderProps {\r\n  href: string;\r\n  title: string;\r\n  date: string;\r\n  icon: string;\r\n}\r\n\r\ninterface projectCardProps {\r\n  id: string;\r\n  header: cardHeaderProps;\r\n  body: JSX.Element;\r\n  techIcons: techChipsProp;\r\n  techDetails: JSX.Element | null;\r\n  carouselImages: carouselProps;\r\n}\r\n\r\nexport default function ProjectCard(props: projectCardProps): JSX.Element {\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n  return (\r\n    <Grid item id={props.id}>\r\n      <Card>\r\n        <CardHeader\r\n          title={\r\n            props.header.href !== '' ? (\r\n              <Link href={props.header.href} target=\"_blank\" variant=\"h4\">\r\n                {props.header.title}\r\n              </Link>\r\n            ) : (\r\n              <Typography variant=\"h4\">{props.header.title}</Typography>\r\n            )\r\n          }\r\n          subheader={props.header.date}\r\n          avatar={<Avatar variant=\"rounded\" src={props.header.icon}></Avatar>}\r\n          style={{ paddingBottom: '0px' }}\r\n        />\r\n        <div style={{ marginLeft: '56px', paddingTop: '0px' }}>\r\n          <CardContent>\r\n            {props.body}\r\n            <Box component=\"ul\" style={{ paddingLeft: '0px', marginTop: '8px' }}>\r\n              {props.techDetails !== null && (\r\n                <Typography variant=\"h6\">\r\n                  <Link component=\"button\" variant=\"body1\" onClick={handleExpandClick}>\r\n                    <b>{expanded === false ? 'Show' : 'Hide'} technology details</b>\r\n                  </Link>\r\n                </Typography>\r\n              )}\r\n              <TechChips {...props.techIcons} />\r\n            </Box>\r\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n              <Typography variant=\"h6\">\r\n                <b>Technologies details:</b>\r\n              </Typography>\r\n              {props.techDetails}\r\n            </Collapse>\r\n            <ImageCarousel {...props.carouselImages} />\r\n          </CardContent>\r\n        </div>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}\r\n","import ProjectCard from './ProjectCard';\r\nimport React from 'react';\r\nimport { Typography, Link } from '@material-ui/core';\r\n\r\nexport function JavaOSS(): JSX.Element {\r\n  return (\r\n    <ProjectCard\r\n      {...{\r\n        id: 'javaOSS',\r\n        header: {\r\n          href: 'https://github.com/sam-rosenthal/java-cssSelector-to-xpath',\r\n          title: 'java-cssSelector-to-xpath OSS Project',\r\n          date: 'June 2018 - Present',\r\n          icon: 'favBig.png',\r\n        },\r\n        body: (\r\n          <Typography>\r\n            I developed this Open Source Software (\r\n            <Link\r\n              href=\"https://github.com/sam-rosenthal/java-cssSelector-to-xpath/blob/samdev/License.txt\"\r\n              target=\"_blank\"\r\n            >\r\n              MIT License\r\n            </Link>\r\n            ) which is written in Java and converts CSS Selector Strings to XPath Strings. Running this software in\r\n            3rd-party packages requires no additional external jar files.\r\n          </Typography>\r\n        ),\r\n        techIcons: {\r\n          data: [\r\n            {\r\n              icon: '../techicons/eclipse.png',\r\n              label: 'Eclipse',\r\n            },\r\n            {\r\n              icon: '../techicons/java.png',\r\n              label: 'JDK8',\r\n            },\r\n            {\r\n              icon: '../techicons/maven.png',\r\n              label: 'Maven',\r\n            },\r\n            {\r\n              icon: '../techicons/regex.png',\r\n              label: 'Regular Expressions',\r\n            },\r\n            {\r\n              icon: '../techicons/junit.png',\r\n              label: 'JUnit',\r\n            },\r\n            {\r\n              icon: '../techicons/git.png',\r\n              label: 'Git',\r\n            },\r\n            {\r\n              icon: '../techicons/tortoisegit.png',\r\n              label: 'Tortoise Git',\r\n            },\r\n            {\r\n              icon: '../techicons/github.png',\r\n              label: 'Github',\r\n            },\r\n            {\r\n              icon: '../techicons/travis.png',\r\n              label: 'Travis CI',\r\n            },\r\n          ],\r\n        },\r\n        techDetails: (\r\n          <>\r\n            <Typography>\r\n              <b>Regular Expressions</b> - Java Regex Utility classes were used to validate and parse the CSS Selector\r\n              strings. I used the Matcher and Pattern classes to parse the selector into elements, attribute names, and\r\n              attributes that make up the components of the CSS Selector String. Once the string was broken into its\r\n              components it was straight forward to reconstruct the corresponding XPath String. Listed are some Regular\r\n              Expressions that were used to identify CSS Selector components:\r\n            </Typography>\r\n            <code style={{ backgroundColor: '#e0e0e0' }}>\r\n              {' '}\r\n              private static final String QUOTES_RE = &quot;([\\&quot;\\&apos;])&quot;; private static final String\r\n              ATTRIBUTE_VALUE_RE = &quot;([-_.#a-zA-Z0-9:\\\\/ ]+)&quot;; private static final String\r\n              ATTRIBUTE_VALUE_RE_NO_SPACES = &quot;([-_.#a-zA-Z0-9:\\\\/]+)&quot;; private static final String\r\n              ELEMENT_ATTRIBUTE_NAME_RE=&quot;(-?[_a-zA-Z]+[_a-zA-Z0-9-]*)&quot;; private static final String\r\n              STARTING_ELEMENT_RE = &quot;^(&quot;+ELEMENT_ATTRIBUTE_NAME_RE+&quot;|([*]))?&quot;; private static final\r\n              String PSUEDO_RE = &quot;(:[a-z][a-z\\\\-]*([(][^)]+[)])?)&quot;;\r\n            </code>\r\n            <Typography>\r\n              Regular expressions were also used when calling the Java replaceAll String method. A simple example of a\r\n              regex expression that was used to remove white spaces was:\r\n            </Typography>\r\n            <code style={{ backgroundColor: '#e0e0e0' }}>\r\n              {' '}\r\n              selectorString=selectorString.replaceAll(&quot;\\\\s+&quot;,&quot;&quot;);\r\n            </code>\r\n            <hr />\r\n            <Typography>\r\n              <b>Recursion</b> - A basic CSS Selector is made up of (0 or 1) elements associated with (0 or more)\r\n              attributes. A basic CSS Selector can have a &quot;combinator&quot; relationship with another CSS selector\r\n              which then can have a &quot;combinator&quot; relationship with another CSS Selector which ... This is the\r\n              &quot;cascading&quot; relationship of CSS. This pattern lent itself to recursion. I created a recursive\r\n              method, recursiveSelectorSplit, which takes a basic selector and looks for a combinator. If it finds one\r\n              it adds the element/combinator pair to a list of these pairs and calls itself to find the next cascading\r\n              relationship. The recursion is complete when there are no more &quot;combinators&quot;.\r\n            </Typography>\r\n            <hr />\r\n            <Typography>\r\n              <b>\r\n                <Link href=\"https://junit.org/junit4/\" target=\"_blank\">\r\n                  Junit Testing\r\n                </Link>\r\n              </b>{' '}\r\n              - Individual classes and methods, end-to-end testing (CSS input String to XPath output String), invalid\r\n              CSS Selector Strings, and unsupported CSS Selector Strings are all tested using the JUnit test framework.\r\n              I currently have 19 JUnit tests and over 310 individual test cases and growing.{' '}\r\n            </Typography>\r\n            <hr />\r\n            <Typography>\r\n              {' '}\r\n              <b>\r\n                <Link href=\"https://www.seleniumhq.org/\" target=\"_blank\">\r\n                  Selenium Testing\r\n                </Link>\r\n              </b>{' '}\r\n              - I used Selenium testing to verify that the actual output of my CSS Selector converter is producing\r\n              correct and valid XPaths. Please see{' '}\r\n              <Link href=\"#java-cssSelector-to-xpath-website-technology-details\">Selenium testing details</Link> of the\r\n              CSS Selector to XPath Converter Website.\r\n            </Typography>\r\n            <hr />\r\n            <Typography>\r\n              <b>\r\n                GitHub, Git,{' '}\r\n                <Link href=\"https://tortoisegit.org/\" target=\"_blank\">\r\n                  Tortoise Git\r\n                </Link>\r\n              </b>{' '}\r\n              - Used Git as my version control system. GitHub was my code repository. Used Eclipse&apos;s Git-plugin and\r\n              Tortoise Git to manage my source code on my development PC.\r\n            </Typography>\r\n            <hr />\r\n            <Typography>\r\n              <b>\r\n                <Link href=\"https://maven.apache.org/\" target=\"_blank\">\r\n                  Apache Maven\r\n                </Link>\r\n              </b>{' '}\r\n              - Used Maven as the build automation tool. Configured POM file to pull all required software and\r\n              dependencies. The POM file also included plugins to run unit and integration (Selenium) tests. Maven was\r\n              used for development, continuous integration, and deployment of the software.{' '}\r\n            </Typography>\r\n            <hr />\r\n            <Typography>\r\n              <b>Continuous Integration</b> - Continuous Integration - Used{' '}\r\n              <Link href=\"https://travis-ci.org/\" target=\"_blank\">\r\n                Travis CI\r\n              </Link>{' '}\r\n              as the continuous integration service for this project. When changes are committed to GitHub (Branches and\r\n              Master), the CI pipeline is started. The code is checked out from Github, compiled, and all unit tests are\r\n              run.\r\n              <i>Note: I have set up all Selenium tests as integration-tests so they are not run as part of CI.</i>\r\n            </Typography>\r\n            <hr />\r\n          </>\r\n        ),\r\n        carouselImages: {\r\n          images: [\r\n            {\r\n              label: 'Github ReadMe',\r\n              imgPath: 'https://sam-rosenthal.github.io/projects/oss/code/GitReadme.png',\r\n            },\r\n          ],\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport function ConverterWebsite(): JSX.Element {\r\n  return (\r\n    <ProjectCard\r\n      {...{\r\n        id: 'converterWebsite',\r\n        header: {\r\n          href: 'https://css-selector-to-xpath.appspot.com/',\r\n          title: 'CSS Selector to XPath Converter Website',\r\n          date: 'July 2018 - Present',\r\n          icon: 'favBig.png',\r\n        },\r\n        body: (\r\n          <Typography>\r\n            Free online CSS Selector to XPath converter. This tool uses java-cssSelector-to-xpath OSS to transform CSS\r\n            Selector strings to XPath strings.\r\n          </Typography>\r\n        ),\r\n        techIcons: {\r\n          data: [\r\n            {\r\n              icon: '../techicons/react.png',\r\n              label: 'React',\r\n            },\r\n            {\r\n              icon: '../techicons/typescript.png',\r\n              label: 'Typescript',\r\n            },\r\n            {\r\n              icon: '../techicons/html.png',\r\n              label: 'HTML 5',\r\n            },\r\n            {\r\n              icon: '../techicons/css.png',\r\n              label: 'CSS 3',\r\n            },\r\n            {\r\n              icon: '../techicons/gcp.png',\r\n              label: 'Google Cloud Platform',\r\n            },\r\n            {\r\n              icon: '../techicons/vscode.png',\r\n              label: 'Visual Studio',\r\n            },\r\n            {\r\n              icon: '../techicons/java.png',\r\n              label: 'JDK8',\r\n            },\r\n            {\r\n              icon: '../techicons/maven.png',\r\n              label: 'Maven',\r\n            },\r\n            {\r\n              icon: '../techicons/eclipse.png',\r\n              label: 'Eclipse',\r\n            },\r\n            {\r\n              icon: '../techicons/regex.png',\r\n              label: 'Regular Expressions',\r\n            },\r\n            {\r\n              icon: '../techicons/junit.png',\r\n              label: 'JUnit',\r\n            },\r\n            {\r\n              icon: '../techicons/git.png',\r\n              label: 'Git',\r\n            },\r\n            {\r\n              icon: '../techicons/tortoisegit.png',\r\n              label: 'Tortoise Git',\r\n            },\r\n            {\r\n              icon: '../techicons/github.png',\r\n              label: 'Github',\r\n            },\r\n            {\r\n              icon: '../techicons/travis.png',\r\n              label: 'Travis CI',\r\n            },\r\n            {\r\n              icon: '../techicons/debian.png',\r\n              label: 'Debian Linux',\r\n            },\r\n            {\r\n              icon: '../techicons/analytics.png',\r\n              label: 'Google Analytics',\r\n            },\r\n          ],\r\n        },\r\n        techDetails: (\r\n          <>\r\n            <Typography>\r\n              {' '}\r\n              <b>Selenium Testing</b> - I implemented two types of Selenium Testing. The obvious testing is to verify\r\n              that my CSS Selector to XPath website is working properly. My tests also verify that the actual output of\r\n              my CSS Selector converter is producing correct and valid XPaths. <br /> <br />\r\n              All Selenium tests are driven by the JUnit test framework. I test 3 browsers: Chrome, FireFox, and Edge.{' '}\r\n              <i>Note: I developed on a Windows PC and that&apos;s why I chose those three browsers to test. </i>\r\n              My first set of Selenium tests verify that all expected text is displayed on my the converter website. I\r\n              verify that all links work and bring up the expected websites on a new tab. Through automated Selenium\r\n              testing, I verify that the expected results are properly displayed when CSS selectors are entered and the\r\n              convert button is pressed. I also check when invalid CSS Selectors are entered that the proper error\r\n              messages are displayed. I created an abstract Selenium test class that is extended by all tests. The\r\n              abstract class includes setting up the browser, specific drivers, methods to go to website URLs, test text\r\n              and links, entering text, pressing the convert button, and error messages. <br />\r\n              <br />\r\n              The second type of Selenium test verifies that my OSS software correctly converts CSS Selectors. Selenium\r\n              can identify elements of a webpage by either CSS Selectors or XPaths. I have written all the Selenium\r\n              tests exclusively using Selenium&apos;s &quot;By.cssSelector&quot; method. I then rerun the tests using\r\n              the same code except for the following change: the original test CSS Selector input is converted using my\r\n              OSS software to an XPath which is then passed in as the argument for the &quot;By.xpath&quot; method. Both\r\n              versions of the Selenium test work on all three browser types, demonstrating that the converter software\r\n              is working properly. The final &quot;special&quot; test checks the contents of a (\r\n              <Link\r\n                href=\"https://css-selector-to-xpath.appspot.com/css-selector-to-xpath-reference-cases\"\r\n                target=\"_blank\"\r\n              >\r\n                test webpage\r\n              </Link>\r\n              ) constructed with the same base-case CSS Selectors defined in a JUnit test written for the OSS converter\r\n              software. The Selenium test and the JUnit test use the same inputs and outputs as part of this special\r\n              test.\r\n              <br />\r\n              <br />\r\n              The following is how I implemented the By.cssSelector and By.xpath Selenium tests:\r\n              <br />\r\n              <br />\r\n              The abstract Selenium class has the following method:\r\n            </Typography>\r\n            <code style={{ backgroundColor: '#e0e0e0' }}>\r\n              protected By getBy(String cssSelector) {'return By.cssSelector(cssSelector);'}\r\n            </code>\r\n            <Typography>The By.xpath tests override this method with:</Typography>\r\n            <code style={{ backgroundColor: '#e0e0e0' }}>\r\n              @Override\r\n              {\r\n                'protected By getBy(String cssSelector) {  String xpath = null; try { xpath = converter.convertCssSelectorStringToXpathString(cssSelector);} catch (CssSelectorToXPathConverterException e) {throw new RuntimeException(e); } System.out.println(\"original cssSelector=\"+cssSelector+\", using xpath=\"+xpath); return By.xpath(xpath);}'\r\n              }\r\n            </code>\r\n            <hr />\r\n            <Typography>\r\n              <b>\r\n                <Link href=\"https://wicket.apache.org/\" target=\"_blank\">\r\n                  Apache Wicket\r\n                </Link>\r\n              </b>{' '}\r\n              - Used Wicket as the web application framework for the website. I modified one of Wicket&apos;s example\r\n              programs,\r\n              <Link href=\"http://examples8x.wicket.apache.org/echo/\" target=\"_blank\">\r\n                {' '}\r\n                echo{' '}\r\n              </Link>{' '}\r\n              which consisted of a text field and a submit button. Since Wicket uses HTML file for templating, I was\r\n              able to easily add custom static content, including links, to the website.{' '}\r\n            </Typography>\r\n            <hr />\r\n            <Typography>\r\n              <b>\r\n                <Link href=\"https://console.cloud.google.com/appengine\" target=\"_blank\">\r\n                  GCP App Engine\r\n                </Link>\r\n              </b>{' '}\r\n              - Used{' '}\r\n              <Link href=\"https://console.cloud.google.com\" target=\"_blank\">\r\n                {' '}\r\n                Google Cloud Platform&apos;s App Engine\r\n              </Link>{' '}\r\n              to host CSS Selector to XPath Converter Website. I created a GCP account and project. I used GCP&apos;s\r\n              suite tools to deploy, monitor, and manage the website.\r\n            </Typography>\r\n            <hr />\r\n            <Typography>\r\n              <b>\r\n                <Link href=\"https://www.debian.org/\" target=\"_blank\">\r\n                  Linux (Debian)\r\n                </Link>\r\n              </b>{' '}\r\n              - Used Google&apos;s Cloud Shell (a bash shell) to compile, test deploy, and deploy webapp on the GCP App\r\n              Engine.\r\n            </Typography>\r\n            <hr />\r\n            <Typography>\r\n              <b>\r\n                <Link href=\"https://analytics.google.com/\" target=\"_blank\">\r\n                  Google Analytics\r\n                </Link>\r\n              </b>{' '}\r\n              - Used Google Analytics to track progress and monitor website&apos;s traffic. The traffic statistics for\r\n              the first four months that my website was up and running was as follows:{' '}\r\n            </Typography>\r\n            <table>\r\n              <tbody>\r\n                <tr>\r\n                  <th>Month</th>\r\n                  <th>Visitors</th>\r\n                  <th>Countries of Visitors</th>\r\n                  <th>Total Visits</th>\r\n                  <th>Average Visit Time (secs)</th>\r\n                </tr>\r\n                <tr>\r\n                  <td>September 2018</td>\r\n                  <td>72</td>\r\n                  <td>17</td>\r\n                  <td>100</td>\r\n                  <td>34</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>October 2018</td>\r\n                  <td>118</td>\r\n                  <td>20</td>\r\n                  <td>163</td>\r\n                  <td>12</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>November 2018</td>\r\n                  <td>126</td>\r\n                  <td>26</td>\r\n                  <td>152</td>\r\n                  <td>43</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>December 2018</td>\r\n                  <td>160</td>\r\n                  <td>24</td>\r\n                  <td>184</td>\r\n                  <td>45</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>January</td>\r\n                  <td>240</td>\r\n                  <td>57</td>\r\n                  <td>283</td>\r\n                  <td>35</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Febuary</td>\r\n                  <td>239</td>\r\n                  <td>56</td>\r\n                  <td>288</td>\r\n                  <td>43</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>March</td>\r\n                  <td>296</td>\r\n                  <td>57</td>\r\n                  <td>360</td>\r\n                  <td>50</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>April</td>\r\n                  <td>284</td>\r\n                  <td>55</td>\r\n                  <td>355</td>\r\n                  <td>43</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>May</td>\r\n                  <td>346</td>\r\n                  <td>63</td>\r\n                  <td>445</td>\r\n                  <td>75</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>June</td>\r\n                  <td>231</td>\r\n                  <td>51</td>\r\n                  <td>300</td>\r\n                  <td>49</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>July</td>\r\n                  <td>314</td>\r\n                  <td>52</td>\r\n                  <td>397</td>\r\n                  <td>42</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <hr />\r\n            <Typography>\r\n              <b>GitHub, Git, Apache Maven, Continuous Integration</b> - This Website&apos;s source code is maintained\r\n              as part of the java-csSelector-to-xpath repository (See previous section for details){' '}\r\n            </Typography>\r\n            <hr />\r\n          </>\r\n        ),\r\n        carouselImages: {\r\n          images: [\r\n            {\r\n              label: 'Website',\r\n              imgPath: '../Screenshots/Website/Website.JPG',\r\n            },\r\n            {\r\n              label: 'Hosted on Google Cloud Platform',\r\n              imgPath: '../Screenshots/Website/GCP.JPG',\r\n            },\r\n            {\r\n              label: 'Google Analyrics Homepage',\r\n              imgPath: '../Screenshots/Website/Analytics.JPG',\r\n            },\r\n            {\r\n              label: 'Google Analytics World Map',\r\n              imgPath: '../Screenshots/Website/Map.JPG',\r\n            },\r\n          ],\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport function PersonalWebsite(): JSX.Element {\r\n  return (\r\n    <ProjectCard\r\n      {...{\r\n        id: 'personalWebsite',\r\n        header: {\r\n          href: '',\r\n          title: 'Personal Website',\r\n          date: 'July 2018 - Present',\r\n          icon: 'favBig.png',\r\n        },\r\n        body: (\r\n          <Typography>\r\n            This website was developed from scratch without templates or publishing tools. I used VSCode as my editor.\r\n            MaterialUi was used as the front-end component library. I used Font-Awesome for some icons. Javascript and\r\n            jQuery were used to supplement Bootstrap to provide additional dynamic behavior.\r\n          </Typography>\r\n        ),\r\n        techIcons: {\r\n          data: [\r\n            {\r\n              icon: '../techicons/react.png',\r\n              label: 'React',\r\n            },\r\n            {\r\n              icon: '../techicons/typescript.png',\r\n              label: 'Typescript',\r\n            },\r\n            {\r\n              icon: '../techicons/html.png',\r\n              label: 'HTML 5',\r\n            },\r\n            {\r\n              icon: '../techicons/css.png',\r\n              label: 'CSS 3',\r\n            },\r\n            {\r\n              icon: '../techicons/material.png',\r\n              label: 'Material UI',\r\n            },\r\n            {\r\n              icon: '../techicons/vscode.png',\r\n              label: 'Visual Studio',\r\n            },\r\n            {\r\n              icon: '../techicons/git.png',\r\n              label: 'Git',\r\n            },\r\n            {\r\n              icon: '../techicons/tortoisegit.png',\r\n              label: 'Tortoise Git',\r\n            },\r\n            {\r\n              icon: '../techicons/github.png',\r\n              label: 'Github',\r\n            },\r\n          ],\r\n        },\r\n        techDetails: (\r\n          <>\r\n            <Typography>\r\n              <b>Regular Expressions</b> - Java Regex Utility classes were used to validate and parse the CSS Selector\r\n            </Typography>\r\n            <hr />\r\n          </>\r\n        ),\r\n        carouselImages: {\r\n          images: [],\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import ProjectCard from './ProjectCard';\r\nimport React from 'react';\r\nimport { Typography, Link } from '@material-ui/core';\r\n\r\nexport function Homesite(): JSX.Element {\r\n  return (\r\n    <ProjectCard\r\n      {...{\r\n        id: 'homesite',\r\n        header: {\r\n          href: 'https://go.homesite.com/',\r\n          title: 'Software Development Engineer in Test (SDET) Intern',\r\n          date: 'Homesite Group | Summer 2019',\r\n          icon: '../Screenshots/Homesite/Homesite.png',\r\n        },\r\n        body: (\r\n          <>\r\n            <Typography>\r\n              <b>Overview</b>\r\n            </Typography>{' '}\r\n            <Typography>\r\n              Worked as a member of Homesite&apos;s QA Automation team. Built a testing framework for Homesite&apos;s\r\n              home-insurance quoting REST API (HSAPI) with{' '}\r\n              <Link\r\n                href=\"https://smartbear.com/product/ready-api/overview/?utm_source=aw&utm_medium=ppcs&utm_campaign=brand-readyapi&utm_content=trial&utm_term=readyapi&gclid=CjwKCAjwkenqBRBgEiwA-bZVtlOr-1LlZ_Se9URk0-Ov8z1j2ptj_eOBV2tAwd4-iVdAuXuoeYUC1RoCt_EQAvD_BwE\"\r\n                target=\"_blank\"\r\n              >\r\n                {' '}\r\n                ReadyAPI\r\n              </Link>\r\n              . The testing framework is the initial step to replace the current legacy API testing framework. I learned\r\n              domain expertise on home insurance underwriting and Homesite&apos;s business model to provide insurance\r\n              for their partners and customers. At the end of the summer I studied and passed the{' '}\r\n              <Link href=\"https://www.soapui.org/professional/soapui-pro.html\" target=\"_blank\">\r\n                SoapUI Pro\r\n              </Link>\r\n              <Link href=\"sam/SoapUIProCertificate.pdf\" target=\"_blank\">\r\n                Certification\r\n              </Link>\r\n              , the primary tool used in the framework I worked on.{' '}\r\n            </Typography>\r\n            <br />\r\n            <Typography>\r\n              <b>Project Details</b>\r\n            </Typography>\r\n            <Typography>\r\n              I helped develop a framework for testing the end-to-end flow of HSAPI. Three test-suites were created, one\r\n              for each type of home insurance Homesite provides (homeowners, renters, condos). Each test-suite included\r\n              test cases that would send all HTTP requests (Post, Put, and Get) required for retrieving and purchasing a\r\n              quote. Since home insurance laws vary by state, each suite ran multiple times with the necessary input\r\n              data to generate a quote. Every JSON HTTP response was verified to contain a valid http status code of 200\r\n              and a &quot;RequirementMessage&quot; of &quot;ok&quot;. Note: when a request had missing requirements the\r\n              requirement message would have details on missing data.\r\n            </Typography>\r\n            <br />\r\n            <Typography>\r\n              ReadyAPI was the IDE used in software development of the automated test framework. Test cases were written\r\n              using Groovy. Test cases made REST calls to HSAPI via SoapUI. Groovy parser classes were created to\r\n              convert JSON responses into a HashMap (using JsonSlurper). The classes included getter methods to retrieve\r\n              all insurance information. All parser classes extended an abstract base class that was created to handle\r\n              general information that appeared in every response, such as: SessionID, HttpStatusCode,\r\n              RequiremenMessage, etc.\r\n            </Typography>\r\n            <br />\r\n            <Typography>\r\n              Microsoft SQL server database was used to enable the test framework to be dynamic and data driven. To\r\n              generate each JSON HTTP request, two tables were queried. The first table would return the JSON keys and\r\n              the second table return the JSON values. Microsoft SQL Server Management was the IDE used to query and\r\n              update the databases.\r\n            </Typography>\r\n            <br />\r\n            <Typography>\r\n              <b>Testing Software Approach</b>\r\n            </Typography>{' '}\r\n            <Typography>\r\n              Followed a pseudo-agile software development approach. Participated in week-long sprints. Used Jira to\r\n              organize and manage a backlog of stories and Confluence to provide overall project status and milestones.\r\n              Development branches were managed by Bitbucket. Continuous integration used a Jenkins pipeline to run and\r\n              verify all tests.{' '}\r\n            </Typography>\r\n            <br />\r\n            <Typography>\r\n              <b>Documentation</b>\r\n            </Typography>\r\n            <Typography>\r\n              Wrote a test plan using Confluence to outline our testing approach. The test plan consisted of the\r\n              following:\r\n            </Typography>\r\n            <ul style={{ marginTop: '0px', paddingLeft: '20px' }}>\r\n              <li>A vision statement and purpose statement for the product as understood by QA</li>\r\n              <li>\r\n                Test request/response product flows{' '}\r\n                <ul style={{ paddingLeft: '20px' }}>\r\n                  <li>HSAPI quote creation, retrieval, and purchace for homeowners, renters, and condos insurance</li>\r\n                </ul>\r\n              </li>\r\n              <li>\r\n                Test Resource constraints{' '}\r\n                <ul style={{ paddingLeft: '20px' }}>\r\n                  <li>Release deadlines, software licenses, personnel</li>\r\n                </ul>\r\n              </li>\r\n              <li>Test Roles and responsibilities of the test team</li>\r\n              <li>Test Approach describes the testing tools used and the testing methodology</li>\r\n            </ul>\r\n            <Typography>\r\n              QA Automation&apos;s coding standards required all Groovy scripts to include Groovydoc. Class\r\n              documentation overviewed the class functionality. Method documentation described the method and the\r\n              definition of all inputs and outputs.\r\n            </Typography>\r\n            <br />\r\n            <Typography>\r\n              <b>Software tools</b>\r\n            </Typography>\r\n            <Typography>Used the following software tools:</Typography>\r\n            <ul style={{ margin: '0px', paddingLeft: '20px' }}>\r\n              <li>\r\n                <b>ReadyAPI & SoapUI</b> for automated testing\r\n              </li>\r\n              <li>\r\n                <b>Bitbucket and Git</b> for software configuration management\r\n              </li>\r\n              <li>\r\n                <b>Visual Studio Code</b> as the IDE for Groovy\r\n              </li>\r\n              <li>\r\n                <b>Jira</b> for project management\r\n              </li>\r\n              <li>\r\n                <b>Microsoft SQL Server Management</b> as the SQL IDE\r\n              </li>\r\n              <li>\r\n                <b>Confluence</b> as the documentation and knowledge management system\r\n              </li>\r\n              <li>\r\n                <b>Microsoft Teams</b> as the communications platform\r\n              </li>\r\n              <li>\r\n                <b>Jenkins</b> for continuous integration <i>(this was incorporated at the end of the internship)</i>\r\n              </li>\r\n            </ul>\r\n          </>\r\n        ),\r\n        techIcons: {\r\n          data: [\r\n            {\r\n              icon: '../techicons/soapui.png',\r\n              label: 'Soap UI Pro',\r\n            },\r\n            {\r\n              icon: '../techicons/readyapi.png',\r\n              label: 'ReadyApi',\r\n            },\r\n            {\r\n              icon: '../techicons/groovy.png',\r\n              label: 'Groovy',\r\n            },\r\n            {\r\n              icon: '../techicons/git.png',\r\n              label: 'Git',\r\n            },\r\n            {\r\n              icon: '../techicons/bitbucket.png',\r\n              label: 'BitBucket',\r\n            },\r\n            {\r\n              icon: '../techicons/confluence.png',\r\n              label: 'Confluence',\r\n            },\r\n            {\r\n              icon: '../techicons/jira.png',\r\n              label: 'Jira',\r\n            },\r\n            {\r\n              icon: '../techicons/vscode.png',\r\n              label: 'Visual Studio',\r\n            },\r\n            {\r\n              icon: '../techicons/json.png',\r\n              label: 'JSON',\r\n            },\r\n            {\r\n              icon: '../techicons/microsoftsql.png',\r\n              label: 'Microsoft SQL Server',\r\n            },\r\n            {\r\n              icon: '../techicons/jenkins.png',\r\n              label: 'Jenkins',\r\n            },\r\n          ],\r\n        },\r\n        techDetails: null,\r\n        carouselImages: {\r\n          images: [\r\n            {\r\n              label: 'Website Ui',\r\n              imgPath: '../Screenshots/Homesite/WebsiteUI.png',\r\n            },\r\n            {\r\n              label: 'ReadyApi Interface',\r\n              imgPath: '../Screenshots/Homesite/ReadyApi.png',\r\n            },\r\n            {\r\n              label: 'BitBucket',\r\n              imgPath: '../Screenshots/Homesite/Bitbucket.png',\r\n            },\r\n            {\r\n              label: 'Microsoft SQL Management Server',\r\n              imgPath: '../Screenshots/Homesite/SQL.png',\r\n            },\r\n          ],\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport function TIC(): JSX.Element {\r\n  return (\r\n    <ProjectCard\r\n      {...{\r\n        id: 'tic',\r\n        header: {\r\n          href: 'http://ticcamp.com/',\r\n          title: 'Camp Programming Counselor',\r\n          date: 'TIC Summer Camp | Summer 2017, 2018',\r\n          icon: '../Screenshots/TIC/TIC.png',\r\n        },\r\n        body: (\r\n          <>\r\n            <Typography>\r\n              Taught Java and{' '}\r\n              <Link href=\"https://www.terrapinlogo.com/\" target=\"_blank\">\r\n                Terrapin Logo\r\n              </Link>{' '}\r\n              programming to campers ages 7 to 14. Worked with groups of 2-4 campers to develop games and applications.{' '}\r\n              <br /> <br /> Java programs were written in Swing and utilized{' '}\r\n              <Link href=\"https://processing.org/\" target=\"_blank\">\r\n                Processing\r\n              </Link>\r\n              &apos;s graphic framework. Graphical programs would often use AWT Graphics, AWT Shapes, BufferedIO,\r\n              ImageIO, events, and event listeners. Text-based programs would use Scanner and JOptionPanes. All software\r\n              developement was written using the Eclipse IDE. Campers typically had 0-3 years of prior java programming\r\n              experience.\r\n              <br /> <br />\r\n              Logo programs were written using{' '}\r\n              <Link href=\"http://www.microworlds.com/solutions/mwex.html\" target=\"_blank\">\r\n                Microworlds EX IDE\r\n              </Link>\r\n              . All programs used the{' '}\r\n              <Link href=\"https://en.wikipedia.org/wiki/Turtle_graphics\" target=\"_blank\">\r\n                turtle-graphics\r\n              </Link>{' '}\r\n              as the graphical user interface. Programs involved working with graphical templates and creating rules and\r\n              procedures. Campers typically had 0-1 years of Logo programming experience.\r\n            </Typography>\r\n          </>\r\n        ),\r\n        techIcons: {\r\n          data: [\r\n            {\r\n              icon: '../techicons/eclipse.png',\r\n              label: 'Eclipse',\r\n            },\r\n            {\r\n              icon: '../techicons/java.png',\r\n              label: 'JDK8',\r\n            },\r\n            {\r\n              icon: '../techicons/processing.png',\r\n              label: 'Processing',\r\n            },\r\n            {\r\n              icon: '../techicons/microworlds.ico',\r\n              label: 'Microworlds',\r\n            },\r\n            {\r\n              icon: null,\r\n              label: 'Terrapin Logo',\r\n            },\r\n          ],\r\n        },\r\n        techDetails: null,\r\n        carouselImages: {\r\n          images: [\r\n            {\r\n              label: 'Tron (Java)',\r\n              imgPath: '../Screenshots/TIC/Java/Tron.png',\r\n            },\r\n            {\r\n              label: '1v1 Doodle Jump (Java)',\r\n              imgPath: '../Screenshots/TIC/Java/DoodleJump.png',\r\n            },\r\n            {\r\n              label: 'Chicken Little (Java)',\r\n              imgPath: '../Screenshots/TIC/Java/Chicken.png',\r\n            },\r\n            {\r\n              label: 'Surrealifier (Java)',\r\n              imgPath: '../Screenshots/TIC/Java/Surrealifier.png',\r\n            },\r\n            {\r\n              label: 'Pong (Java)',\r\n              imgPath: '../Screenshots/TIC/Java/Pong.png',\r\n            },\r\n            {\r\n              label: 'Trivia Quiz (Java)',\r\n              imgPath: '../Screenshots/TIC/Java/Quiz.png',\r\n            },\r\n            {\r\n              label: 'Crossy Road (logo)',\r\n              imgPath: '../Screenshots/TIC/logo/CrossyRoad.png',\r\n            },\r\n            {\r\n              label: 'Firefront (logo)',\r\n              imgPath: '../Screenshots/TIC/logo/Firefront.png',\r\n            },\r\n            {\r\n              label: 'Trivia (logo)',\r\n              imgPath: '../Screenshots/TIC/logo/Trivia.png',\r\n            },\r\n            {\r\n              label: 'Maze Man (logo)',\r\n              imgPath: '../Screenshots/TIC/logo/MazeMan.png',\r\n            },\r\n            {\r\n              label: 'Jaguars (logo)',\r\n              imgPath: '../Screenshots/TIC/logo/Jaguar.png',\r\n            },\r\n          ],\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid, Divider } from '@material-ui/core';\r\nimport { JavaOSS, ConverterWebsite, PersonalWebsite } from './ProjectInformation';\r\nimport { Homesite, TIC } from './WorkInformation';\r\n\r\nexport default function Projects(): JSX.Element {\r\n  return (\r\n    <Grid container direction=\"column\" justify=\"center\" spacing={3} style={{ textAlign: 'left' }}>\r\n      <Grid item>\r\n        <Typography component=\"h1\" variant=\"h2\">\r\n          Personal Projects\r\n        </Typography>\r\n        <Divider />\r\n      </Grid>\r\n      <JavaOSS />\r\n      <ConverterWebsite />\r\n      <PersonalWebsite />\r\n      <Grid item></Grid>\r\n      <Grid item>\r\n        <Typography component=\"h1\" variant=\"h2\">\r\n          Work Experience\r\n        </Typography>\r\n        <Divider />\r\n      </Grid>\r\n      <Homesite />\r\n      <TIC />\r\n      <Grid item></Grid>\r\n      <Grid item>\r\n        <Typography component=\"h1\" variant=\"h2\">\r\n          Class Projects\r\n        </Typography>\r\n        <Divider />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n"],"sourceRoot":""}